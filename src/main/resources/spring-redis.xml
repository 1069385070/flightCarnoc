<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


    <!--使用注解开发-->
    <mvc:annotation-driven />

    <mvc:default-servlet-handler/>
    <!--自动扫描：自动扫描com.heyang.ssm包下所有类的注解-->
    <context:component-scan base-package="com.carnoc.flight"/>
<!-- redis的相关配置已经在applicationContext.xml导入了，因为spring只允许有一个context:property-placeholder -->
    <!-- 所以下面的配置会注释掉了 -->
    <!-- 1. 引入properties配置文件 -->
    <context:property-placeholder location="classpath:redis.properties"></context:property-placeholder>

    <!-- 2. redis连接池配置-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大空闲数-->
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <!--连接池的最大数据库连接数  -->
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <!--最大建立连接等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}"/>
        <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}"/>
        <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"/>
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <!--在空闲时检查有效性, 默认false  -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}"/>
    </bean>

    <!--配置redis数据源-->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
    <constructor-arg ref="poolConfig"></constructor-arg>
    <constructor-arg name="host" value="${redis.hostName}"></constructor-arg>
    <constructor-arg name="port" value="${redis.port}"></constructor-arg>
    </bean>

    <!--&lt;!&ndash; 3. redis连接工厂 &ndash;&gt;-->
    <!--<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"-->
          <!--destroy-method="destroy">-->
        <!--<property name="poolConfig" ref="poolConfig"/>-->
        <!--&lt;!&ndash;IP地址 &ndash;&gt;-->
        <!--<property name="hostName" value="${redis.hostName}"/>-->
        <!--&lt;!&ndash;端口号  &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="port" value="${redis.port}"/>&ndash;&gt;-->
        <!--&lt;!&ndash;如果Redis设置有密码  &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="password" value="${redis.password}"/>&ndash;&gt;-->
        <!--&lt;!&ndash;客户端超时时间单位是毫秒  &ndash;&gt;-->
        <!--<property name="timeout" value="${redis.timeout}"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 4. redis操作模板,使用该对象可以操作redis  &ndash;&gt;-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
        <!--&lt;!&ndash;如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  &ndash;&gt;-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashValueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
        <!--</property>-->
        <!--&lt;!&ndash;开启事务  &ndash;&gt;-->
        <!--<property name="enableTransactionSupport" value="true"/>-->
    <!--</bean>-->

    <!--静态注入中间类，解决RedisCache中RedisTemplate的静态注入，从而使MyBatis实现第三方缓存-->
    <!--<bean class="com.zking.zf.redis.RedisCacheTransfer">-->
        <!--<property name="redisTemplate" ref="redisTemplate"/>-->
    <!--</bean>-->

    <!--自定义redis工具类,在需要缓存的地方注入此类，建议使用注解配置  -->
    <!--<bean id="redisUtil" class="com.zking.zf.redis.RedisUtil">-->
    <!--<property name="redisTemplate" ref="redisTemplate"/>-->
    <!--</bean>-->
</beans>
